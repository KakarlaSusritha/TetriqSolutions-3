/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, NgZone } from '@angular/core';
import { NgScrolltopService } from './ng-scrolltop.service';
/** @type {?} */
var DURATION = 1000;
var NgScrolltopDirective = /** @class */ (function () {
    function NgScrolltopDirective(service, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        this.startTime = null;
        this.startTop = null;
        this.progress = 0;
        this.easing = (/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            'use strict';
            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        });
        this.scrollABit = this.scrollABit.bind(this);
    }
    /**
     * @return {?}
     */
    NgScrolltopDirective.prototype.onclick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.startTop = this.service.currentPositionY;
        this.startTime = null;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { window.requestAnimationFrame(_this.scrollABit); }));
        this.service.log('NgScrolltopDirective click');
    };
    /**
     * @param {?} timestamp
     * @return {?}
     */
    NgScrolltopDirective.prototype.scrollABit = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        var _this = this;
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        this.progress = timestamp - this.startTime;
        /** @type {?} */
        var percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
        /** @type {?} */
        var newY = this.startTop - Math.ceil(this.startTop * percent);
        this.service.scrollABit(newY);
        if (percent < 1) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { window.requestAnimationFrame(_this.scrollABit); }));
        }
    };
    NgScrolltopDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[blScrolltop]'
                },] }
    ];
    /** @nocollapse */
    NgScrolltopDirective.ctorParameters = function () { return [
        { type: NgScrolltopService },
        { type: NgZone }
    ]; };
    NgScrolltopDirective.propDecorators = {
        onclick: [{ type: HostListener, args: ['click',] }]
    };
    return NgScrolltopDirective;
}());
export { NgScrolltopDirective };
if (false) {
    /** @type {?} */
    NgScrolltopDirective.prototype.startTime;
    /** @type {?} */
    NgScrolltopDirective.prototype.startTop;
    /** @type {?} */
    NgScrolltopDirective.prototype.progress;
    /** @type {?} */
    NgScrolltopDirective.prototype.easing;
    /** @type {?} */
    NgScrolltopDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsdG9wLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXNjcm9sbHRvcC8iLCJzb3VyY2VzIjpbImxpYi9uZy1zY3JvbGx0b3AuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0lBRXRELFFBQVEsR0FBRyxJQUFJO0FBRXJCO0lBUUUsOEJBQW1CLE9BQTJCLEVBQ3BDLE1BQWM7UUFETCxZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTHhCLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFDekIsYUFBUSxHQUFXLElBQUksQ0FBQztRQUN4QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBZ0JyQixXQUFNOzs7O1FBQUcsVUFBQyxDQUFDO1lBQ1QsWUFBWSxDQUFDO1lBRWIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO2dCQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQjtZQUNELE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxDQUFDLEVBQUE7UUFuQkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBR0Qsc0NBQU87OztJQURQO1FBQUEsaUJBT0M7UUFMQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLGNBQVEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFXRCx5Q0FBVTs7OztJQUFWLFVBQVcsU0FBUztRQUFwQixpQkFjQztRQWJDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzs7WUFDckMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDOztZQUNqRixJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBRS9ELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTlCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7WUFBQyxjQUFRLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztTQUN6RjtJQUNILENBQUM7O2dCQTdDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzs7O2dCQU5RLGtCQUFrQjtnQkFETyxNQUFNOzs7MEJBa0JyQyxZQUFZLFNBQUMsT0FBTzs7SUFpQ3ZCLDJCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0EzQ1ksb0JBQW9COzs7SUFDL0IseUNBQXlCOztJQUN6Qix3Q0FBd0I7O0lBQ3hCLHdDQUFxQjs7SUFnQnJCLHNDQU9DOztJQXJCVyx1Q0FBa0M7Ozs7O0lBQzVDLHNDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdTY3JvbGx0b3BTZXJ2aWNlIH0gZnJvbSAnLi9uZy1zY3JvbGx0b3Auc2VydmljZSc7XHJcblxyXG5jb25zdCBEVVJBVElPTiA9IDEwMDA7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tibFNjcm9sbHRvcF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbHRvcERpcmVjdGl2ZSB7XHJcbiAgc3RhcnRUaW1lOiBudW1iZXIgPSBudWxsO1xyXG4gIHN0YXJ0VG9wOiBudW1iZXIgPSBudWxsO1xyXG4gIHByb2dyZXNzOiBudW1iZXIgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2VydmljZTogTmdTY3JvbGx0b3BTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xyXG4gICAgdGhpcy5zY3JvbGxBQml0ID0gdGhpcy5zY3JvbGxBQml0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgb25jbGljaygpIHtcclxuICAgIHRoaXMuc3RhcnRUb3AgPSB0aGlzLnNlcnZpY2UuY3VycmVudFBvc2l0aW9uWTtcclxuICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcclxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnNjcm9sbEFCaXQpOyB9KTtcclxuXHJcbiAgICB0aGlzLnNlcnZpY2UubG9nKCdOZ1Njcm9sbHRvcERpcmVjdGl2ZSBjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgZWFzaW5nID0gKHgpID0+IHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBpZiAoeCA8IDAuNSkge1xyXG4gICAgICByZXR1cm4gTWF0aC5wb3coeCAqIDIsIDIpIC8gMjtcclxuICAgIH1cclxuICAgIHJldHVybiAxIC0gTWF0aC5wb3coKDEgLSB4KSAqIDIsIDIpIC8gMjtcclxuICB9XHJcblxyXG4gIHNjcm9sbEFCaXQodGltZXN0YW1wKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhcnRUaW1lKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aW1lc3RhbXAgLSB0aGlzLnN0YXJ0VGltZTtcclxuICAgIGNvbnN0IHBlcmNlbnQgPSAodGhpcy5wcm9ncmVzcyA+PSBEVVJBVElPTiA/IDEgOiB0aGlzLmVhc2luZyh0aGlzLnByb2dyZXNzIC8gRFVSQVRJT04pKTtcclxuICAgIGNvbnN0IG5ld1kgPSB0aGlzLnN0YXJ0VG9wIC0gTWF0aC5jZWlsKHRoaXMuc3RhcnRUb3AgKiBwZXJjZW50KTtcclxuXHJcbiAgICB0aGlzLnNlcnZpY2Uuc2Nyb2xsQUJpdChuZXdZKTtcclxuXHJcbiAgICBpZiAocGVyY2VudCA8IDEpIHtcclxuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4geyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsQUJpdCk7IH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=