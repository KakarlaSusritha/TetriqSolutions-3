/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, isDevMode } from '@angular/core';
import * as i0 from "@angular/core";
/** @type {?} */
var DEFAULT_SCROLLED_PX = 500;
var NgScrolltopService = /** @class */ (function () {
    function NgScrolltopService() {
        var _this = this;
        this.isDevMode = isDevMode();
        this.isWindow = typeof window !== 'undefined';
        this._init = false;
        // scrolling window by default or element if [elementId] is given
        this.lastY = 0;
        this.ticking = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        function (s) {
            var optional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optional[_i - 1] = arguments[_i];
            }
            return s && _this.isDevMode && console.log(s, optional);
        });
        this.handleScroll = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.ticking) {
                window.requestAnimationFrame((/**
                 * @return {?}
                 */
                function () {
                    _this.updateLastY();
                    _this.ticking = false;
                }));
                _this.ticking = true;
            }
        });
    }
    Object.defineProperty(NgScrolltopService.prototype, "currentPositionY", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgScrolltopService.prototype, "info", {
        get: /**
         * @return {?}
         */
        function () { return Math.ceil(this.lastY); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgScrolltopService.prototype, "showIcon", {
        get: /**
         * @return {?}
         */
        function () { return this.isWindow && this.lastY > DEFAULT_SCROLLED_PX; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgScrolltopService.prototype.setDevMode = /**
     * @return {?}
     */
    function () { this.isDevMode = true; };
    /**
     * @param {?} elementId
     * @return {?}
     */
    NgScrolltopService.prototype.init = /**
     * @param {?} elementId
     * @return {?}
     */
    function (elementId) {
        if (this.isWindow) {
            this.destroy();
            this._elementToScroll = null;
            if (elementId) {
                this._elementToScroll = (/** @type {?} */ (document.querySelector("#" + elementId)));
            }
            this._host = this._elementToScroll || window;
            this._host.addEventListener('scroll', this.handleScroll);
            this.log("'NgScrolltopService' to use " + (this._elementToScroll ? 'element' : 'window'), elementId || '');
        }
        this._init = true;
    };
    /**
     * @return {?}
     */
    NgScrolltopService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
    };
    /**
     * @param {?} newY
     * @return {?}
     */
    NgScrolltopService.prototype.scrollABit = /**
     * @param {?} newY
     * @return {?}
     */
    function (newY) {
        if (this._elementToScroll) {
            this._elementToScroll.scrollTop = newY;
        }
        else {
            window.scroll(0, newY);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgScrolltopService.prototype.updateLastY = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._init)
            return;
        /** @type {?} */
        var newY = this.currentPositionY;
        if (newY !== this.lastY) {
            this.lastY = newY;
        }
    };
    NgScrolltopService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgScrolltopService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgScrolltopService.ngInjectableDef = i0.defineInjectable({ factory: function NgScrolltopService_Factory() { return new NgScrolltopService(); }, token: NgScrolltopService, providedIn: "root" });
    return NgScrolltopService;
}());
export { NgScrolltopService };
if (false) {
    /** @type {?} */
    NgScrolltopService.prototype.isDevMode;
    /** @type {?} */
    NgScrolltopService.prototype.isWindow;
    /** @type {?} */
    NgScrolltopService.prototype._init;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype._elementToScroll;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype._host;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.lastY;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.ticking;
    /** @type {?} */
    NgScrolltopService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.handleScroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsdG9wLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1zY3JvbGx0b3AvIiwic291cmNlcyI6WyJsaWIvbmctc2Nyb2xsdG9wLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFFaEQsbUJBQW1CLEdBQUcsR0FBRztBQUUvQjtJQXFCRTtRQUFBLGlCQUFpQjtRQWpCakIsY0FBUyxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLGFBQVEsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUM7UUFDekMsVUFBSyxHQUFHLEtBQUssQ0FBQzs7UUFHTixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsWUFBTyxHQUFHLEtBQUssQ0FBQztRQVN4QixRQUFHOzs7OztRQUFHLFVBQUMsQ0FBTztZQUFFLGtCQUFrQjtpQkFBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO2dCQUFsQixpQ0FBa0I7O1lBQUssT0FBQSxDQUFDLElBQUksS0FBSSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUM7UUFBL0MsQ0FBK0MsRUFBQztRQWtDL0UsaUJBQVk7Ozs7UUFBRyxVQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLEtBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE1BQU0sQ0FBQyxxQkFBcUI7OztnQkFBQztvQkFDM0IsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO29CQUNsQixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtnQkFDdEIsQ0FBQyxFQUFDLENBQUE7Z0JBQ0YsS0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7YUFDcEI7UUFDSCxDQUFDLEVBQUE7SUF4Q2UsQ0FBQztJQVRqQixzQkFBSSxnREFBZ0I7Ozs7UUFBcEI7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0RixDQUFDOzs7T0FBQTtJQUNELHNCQUFJLG9DQUFJOzs7O1FBQVIsY0FBcUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ3BELHNCQUFJLHdDQUFROzs7O1FBQVosY0FBMEIsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTs7OztJQUVyRix1Q0FBVTs7O0lBQVYsY0FBZSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Ozs7O0lBS3ZDLGlDQUFJOzs7O0lBQUosVUFBSyxTQUFpQjtRQUNwQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUM3QixJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQUEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFJLFNBQVcsQ0FBQyxFQUFlLENBQUM7YUFDaEY7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxHQUFHLENBQUMsa0NBQStCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUUsRUFBRSxTQUFTLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUc7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDOzs7O0lBRUQsb0NBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3RixDQUFDOzs7OztJQUVELHVDQUFVOzs7O0lBQVYsVUFBVyxJQUFJO1FBQ2IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDeEM7YUFBTTtZQUNMLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7Ozs7SUFZTyx3Q0FBVzs7OztJQUFuQjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU87O1lBRWxCLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCO1FBQ2xDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7SUFDSCxDQUFDOztnQkF0RUYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7NkJBTkQ7Q0EyRUMsQUF2RUQsSUF1RUM7U0FwRVksa0JBQWtCOzs7SUFDN0IsdUNBQXdCOztJQUN4QixzQ0FBeUM7O0lBQ3pDLG1DQUFjOzs7OztJQUNkLDhDQUFzQzs7Ozs7SUFDdEMsbUNBQW1COzs7OztJQUNuQixtQ0FBa0I7Ozs7O0lBQ2xCLHFDQUF3Qjs7SUFTeEIsaUNBQXVGOzs7OztJQWtDdkYsMENBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmNvbnN0IERFRkFVTFRfU0NST0xMRURfUFggPSA1MDA7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbHRvcFNlcnZpY2Uge1xyXG4gIGlzRGV2TW9kZSA9IGlzRGV2TW9kZSgpO1xyXG4gIGlzV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgX2luaXQgPSBmYWxzZTtcclxuICBwcml2YXRlIF9lbGVtZW50VG9TY3JvbGw6IEhUTUxFbGVtZW50O1xyXG4gIHByaXZhdGUgX2hvc3Q6IGFueTsgLy8gc2Nyb2xsaW5nIHdpbmRvdyBieSBkZWZhdWx0IG9yIGVsZW1lbnQgaWYgW2VsZW1lbnRJZF0gaXMgZ2l2ZW5cclxuICBwcml2YXRlIGxhc3RZID0gMDtcclxuICBwcml2YXRlIHRpY2tpbmcgPSBmYWxzZTtcclxuXHJcbiAgZ2V0IGN1cnJlbnRQb3NpdGlvblkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50VG9TY3JvbGwgPyB0aGlzLl9lbGVtZW50VG9TY3JvbGwuc2Nyb2xsVG9wIDogd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gIH1cclxuICBnZXQgaW5mbygpOiBudW1iZXIgeyByZXR1cm4gTWF0aC5jZWlsKHRoaXMubGFzdFkpOyB9XHJcbiAgZ2V0IHNob3dJY29uKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5pc1dpbmRvdyAmJiB0aGlzLmxhc3RZID4gREVGQVVMVF9TQ1JPTExFRF9QWDsgfVxyXG5cclxuICBzZXREZXZNb2RlKCkgeyB0aGlzLmlzRGV2TW9kZSA9IHRydWU7IH1cclxuICBsb2cgPSAocz86IGFueSwgLi4ub3B0aW9uYWw6IGFueVtdKSA9PiBzICYmIHRoaXMuaXNEZXZNb2RlICYmIGNvbnNvbGUubG9nKHMsIG9wdGlvbmFsKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgaW5pdChlbGVtZW50SWQ6IHN0cmluZykge1xyXG4gICAgaWYgKHRoaXMuaXNXaW5kb3cpIHtcclxuICAgICAgdGhpcy5kZXN0cm95KCk7XHJcblxyXG4gICAgICB0aGlzLl9lbGVtZW50VG9TY3JvbGwgPSBudWxsO1xyXG4gICAgICBpZiAoZWxlbWVudElkKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFRvU2Nyb2xsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7ZWxlbWVudElkfWApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9ob3N0ID0gdGhpcy5fZWxlbWVudFRvU2Nyb2xsIHx8IHdpbmRvdztcclxuICAgICAgdGhpcy5faG9zdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XHJcblxyXG4gICAgICB0aGlzLmxvZyhgJ05nU2Nyb2xsdG9wU2VydmljZScgdG8gdXNlICR7dGhpcy5fZWxlbWVudFRvU2Nyb2xsID8gJ2VsZW1lbnQnIDogJ3dpbmRvdyd9YCwgZWxlbWVudElkIHx8ICcnKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9pbml0ID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmlzV2luZG93ICYmIHRoaXMuX2hvc3QgJiYgdGhpcy5faG9zdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxBQml0KG5ld1kpIHtcclxuICAgIGlmICh0aGlzLl9lbGVtZW50VG9TY3JvbGwpIHtcclxuICAgICAgdGhpcy5fZWxlbWVudFRvU2Nyb2xsLnNjcm9sbFRvcCA9IG5ld1k7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aW5kb3cuc2Nyb2xsKDAsIG5ld1kpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVTY3JvbGwgPSAoZSkgPT4ge1xyXG4gICAgaWYgKCF0aGlzLnRpY2tpbmcpIHtcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMYXN0WSgpXHJcbiAgICAgICAgdGhpcy50aWNraW5nID0gZmFsc2VcclxuICAgICAgfSlcclxuICAgICAgdGhpcy50aWNraW5nID0gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVMYXN0WSgpIHtcclxuICAgIGlmICghdGhpcy5faW5pdCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG5ld1kgPSB0aGlzLmN1cnJlbnRQb3NpdGlvbllcclxuICAgIGlmIChuZXdZICE9PSB0aGlzLmxhc3RZKSB7XHJcbiAgICAgIHRoaXMubGFzdFkgPSBuZXdZO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=