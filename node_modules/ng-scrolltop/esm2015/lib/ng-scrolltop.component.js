/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgScrolltopService } from './ng-scrolltop.service';
/** @type {?} */
const setElementStyle = (/**
 * @param {?} elem
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
(elem, name, value) => {
    if (elem && name) {
        elem.style[name] = value || '';
    }
});
const ɵ0 = setElementStyle;
export class NgScrolltopComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this._size = '48px';
        this.sizeInner = '24';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set bottom(value) {
        this._bottom = value;
        setElementStyle(this.icon, 'bottom', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set background(value) {
        this._background = value;
        setElementStyle(this.icon, 'background', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementId(value) {
        this._elementId = value;
        this.service.init(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        setElementStyle(this.icon, 'width', value);
        setElementStyle(this.icon, 'height', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fill(value) {
        this._fill = value;
        setElementStyle(this.svg, 'fill', value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.service.init(this._elementId);
        this.icon = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev)')));
        this.svg = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev) svg')));
        if (this.icon) {
            setElementStyle(this.icon, 'bottom', this._bottom);
            setElementStyle(this.icon, 'background', this._background);
            setElementStyle(this.icon, 'width', this._size);
            setElementStyle(this.icon, 'height', this._size);
            setElementStyle(this.svg, 'fill', this._fill);
        }
        else {
            this.service.log(`NgScrolltopComponent failed to find icon element, so any inputs will be ignored`);
        }
        this.service.log(`NgScrolltopComponent(${this.service.isWindow}, ${this._bottom}, ${this._background}, ${this._elementId})`, this.icon && this.icon.style);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.service.destroy();
    }
}
NgScrolltopComponent.decorators = [
    { type: Component, args: [{
                selector: 'scrolltop',
                template: `
<div class="scroll-top" blScrolltop
  [ngClass]="{'show-icon': service.showIcon}">
  <svg xmlns="http://www.w3.org/2000/svg" [attr.width]="sizeInner" [attr.height]="sizeInner" viewBox="0 0 24 24"><path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
</div>

<div class="scroll-top dev" *ngIf="service.isDevMode">
  {{service.info}}
</div>
  `,
                styles: [`
  .scroll-top {
    position: fixed;
    bottom: 12px;
    left: 12px;
    height: 48px;
    width: 48px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background: #333;
    transform: rotate(-90deg);
    opacity: 0;
    visibility: hidden;
    transition: visibility 1.0s linear, opacity 1.0s linear;
  }
  .scroll-top:hover {
    cursor: pointer;
  }
  .scroll-top.show-icon {
    visibility: visible;
    opacity: 0.3;
  }
  .scroll-top.dev {
    bottom: 150px;
    visibility: visible;
    opacity: 0.5;
    transform: none;
    color: #fff;
  }
    `]
            }] }
];
/** @nocollapse */
NgScrolltopComponent.ctorParameters = () => [
    { type: NgScrolltopService }
];
NgScrolltopComponent.propDecorators = {
    bottom: [{ type: Input }],
    background: [{ type: Input }],
    elementId: [{ type: Input }],
    size: [{ type: Input }],
    sizeInner: [{ type: Input }],
    fill: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype.icon;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype._bottom;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype._background;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype._elementId;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype._fill;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopComponent.prototype._size;
    /** @type {?} */
    NgScrolltopComponent.prototype.sizeInner;
    /** @type {?} */
    NgScrolltopComponent.prototype.service;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,