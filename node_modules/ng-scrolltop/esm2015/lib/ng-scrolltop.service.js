/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, isDevMode } from '@angular/core';
import * as i0 from "@angular/core";
/** @type {?} */
const DEFAULT_SCROLLED_PX = 500;
export class NgScrolltopService {
    constructor() {
        this.isDevMode = isDevMode();
        this.isWindow = typeof window !== 'undefined';
        this._init = false;
        // scrolling window by default or element if [elementId] is given
        this.lastY = 0;
        this.ticking = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        (s, ...optional) => s && this.isDevMode && console.log(s, optional));
        this.handleScroll = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.ticking) {
                window.requestAnimationFrame((/**
                 * @return {?}
                 */
                () => {
                    this.updateLastY();
                    this.ticking = false;
                }));
                this.ticking = true;
            }
        });
    }
    /**
     * @return {?}
     */
    get currentPositionY() {
        return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
    }
    /**
     * @return {?}
     */
    get info() { return Math.ceil(this.lastY); }
    /**
     * @return {?}
     */
    get showIcon() { return this.isWindow && this.lastY > DEFAULT_SCROLLED_PX; }
    /**
     * @return {?}
     */
    setDevMode() { this.isDevMode = true; }
    /**
     * @param {?} elementId
     * @return {?}
     */
    init(elementId) {
        if (this.isWindow) {
            this.destroy();
            this._elementToScroll = null;
            if (elementId) {
                this._elementToScroll = (/** @type {?} */ (document.querySelector(`#${elementId}`)));
            }
            this._host = this._elementToScroll || window;
            this._host.addEventListener('scroll', this.handleScroll);
            this.log(`'NgScrolltopService' to use ${this._elementToScroll ? 'element' : 'window'}`, elementId || '');
        }
        this._init = true;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
    }
    /**
     * @param {?} newY
     * @return {?}
     */
    scrollABit(newY) {
        if (this._elementToScroll) {
            this._elementToScroll.scrollTop = newY;
        }
        else {
            window.scroll(0, newY);
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateLastY() {
        if (!this._init)
            return;
        /** @type {?} */
        const newY = this.currentPositionY;
        if (newY !== this.lastY) {
            this.lastY = newY;
        }
    }
}
NgScrolltopService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgScrolltopService.ctorParameters = () => [];
/** @nocollapse */ NgScrolltopService.ngInjectableDef = i0.defineInjectable({ factory: function NgScrolltopService_Factory() { return new NgScrolltopService(); }, token: NgScrolltopService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgScrolltopService.prototype.isDevMode;
    /** @type {?} */
    NgScrolltopService.prototype.isWindow;
    /** @type {?} */
    NgScrolltopService.prototype._init;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype._elementToScroll;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype._host;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.lastY;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.ticking;
    /** @type {?} */
    NgScrolltopService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopService.prototype.handleScroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsdG9wLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1zY3JvbGx0b3AvIiwic291cmNlcyI6WyJsaWIvbmctc2Nyb2xsdG9wLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7TUFFaEQsbUJBQW1CLEdBQUcsR0FBRztBQUsvQixNQUFNLE9BQU8sa0JBQWtCO0lBa0I3QjtRQWpCQSxjQUFTLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDeEIsYUFBUSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztRQUN6QyxVQUFLLEdBQUcsS0FBSyxDQUFDOztRQUdOLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBU3hCLFFBQUc7Ozs7O1FBQUcsQ0FBQyxDQUFPLEVBQUUsR0FBRyxRQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFDO1FBa0MvRSxpQkFBWTs7OztRQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLE1BQU0sQ0FBQyxxQkFBcUI7OztnQkFBQyxHQUFHLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtvQkFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUE7Z0JBQ3RCLENBQUMsRUFBQyxDQUFBO2dCQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO2FBQ3BCO1FBQ0gsQ0FBQyxFQUFBO0lBeENlLENBQUM7Ozs7SUFUakIsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDdEYsQ0FBQzs7OztJQUNELElBQUksSUFBSSxLQUFhLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7O0lBQ3BELElBQUksUUFBUSxLQUFjLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQzs7OztJQUVyRixVQUFVLEtBQUssSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7OztJQUt2QyxJQUFJLENBQUMsU0FBaUI7UUFDcEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUVmLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7WUFDN0IsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFBLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxFQUFlLENBQUM7YUFDaEY7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRXpELElBQUksQ0FBQyxHQUFHLENBQUMsK0JBQStCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUc7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDOzs7O0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0YsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBSTtRQUNiLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3hDO2FBQU07WUFDTCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7Ozs7O0lBWU8sV0FBVztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPOztjQUVsQixJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQjtRQUNsQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7O1lBdEVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7OztJQUVDLHVDQUF3Qjs7SUFDeEIsc0NBQXlDOztJQUN6QyxtQ0FBYzs7Ozs7SUFDZCw4Q0FBc0M7Ozs7O0lBQ3RDLG1DQUFtQjs7Ozs7SUFDbkIsbUNBQWtCOzs7OztJQUNsQixxQ0FBd0I7O0lBU3hCLGlDQUF1Rjs7Ozs7SUFrQ3ZGLDBDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5jb25zdCBERUZBVUxUX1NDUk9MTEVEX1BYID0gNTAwO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTY3JvbGx0b3BTZXJ2aWNlIHtcclxuICBpc0Rldk1vZGUgPSBpc0Rldk1vZGUoKTtcclxuICBpc1dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG4gIF9pbml0ID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBfZWxlbWVudFRvU2Nyb2xsOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIF9ob3N0OiBhbnk7IC8vIHNjcm9sbGluZyB3aW5kb3cgYnkgZGVmYXVsdCBvciBlbGVtZW50IGlmIFtlbGVtZW50SWRdIGlzIGdpdmVuXHJcbiAgcHJpdmF0ZSBsYXN0WSA9IDA7XHJcbiAgcHJpdmF0ZSB0aWNraW5nID0gZmFsc2U7XHJcblxyXG4gIGdldCBjdXJyZW50UG9zaXRpb25ZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFRvU2Nyb2xsID8gdGhpcy5fZWxlbWVudFRvU2Nyb2xsLnNjcm9sbFRvcCA6IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICB9XHJcbiAgZ2V0IGluZm8oKTogbnVtYmVyIHsgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmxhc3RZKTsgfVxyXG4gIGdldCBzaG93SWNvbigpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuaXNXaW5kb3cgJiYgdGhpcy5sYXN0WSA+IERFRkFVTFRfU0NST0xMRURfUFg7IH1cclxuXHJcbiAgc2V0RGV2TW9kZSgpIHsgdGhpcy5pc0Rldk1vZGUgPSB0cnVlOyB9XHJcbiAgbG9nID0gKHM/OiBhbnksIC4uLm9wdGlvbmFsOiBhbnlbXSkgPT4gcyAmJiB0aGlzLmlzRGV2TW9kZSAmJiBjb25zb2xlLmxvZyhzLCBvcHRpb25hbCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIGluaXQoZWxlbWVudElkOiBzdHJpbmcpIHtcclxuICAgIGlmICh0aGlzLmlzV2luZG93KSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG5cclxuICAgICAgdGhpcy5fZWxlbWVudFRvU2Nyb2xsID0gbnVsbDtcclxuICAgICAgaWYgKGVsZW1lbnRJZCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRUb1Njcm9sbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2VsZW1lbnRJZH1gKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5faG9zdCA9IHRoaXMuX2VsZW1lbnRUb1Njcm9sbCB8fCB3aW5kb3c7XHJcbiAgICAgIHRoaXMuX2hvc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpO1xyXG5cclxuICAgICAgdGhpcy5sb2coYCdOZ1Njcm9sbHRvcFNlcnZpY2UnIHRvIHVzZSAke3RoaXMuX2VsZW1lbnRUb1Njcm9sbCA/ICdlbGVtZW50JyA6ICd3aW5kb3cnfWAsIGVsZW1lbnRJZCB8fCAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faW5pdCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5pc1dpbmRvdyAmJiB0aGlzLl9ob3N0ICYmIHRoaXMuX2hvc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsQUJpdChuZXdZKSB7XHJcbiAgICBpZiAodGhpcy5fZWxlbWVudFRvU2Nyb2xsKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnRUb1Njcm9sbC5zY3JvbGxUb3AgPSBuZXdZO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2luZG93LnNjcm9sbCgwLCBuZXdZKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlU2Nyb2xsID0gKGUpID0+IHtcclxuICAgIGlmICghdGhpcy50aWNraW5nKSB7XHJcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlTGFzdFkoKVxyXG4gICAgICAgIHRoaXMudGlja2luZyA9IGZhbHNlXHJcbiAgICAgIH0pXHJcbiAgICAgIHRoaXMudGlja2luZyA9IHRydWVcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlTGFzdFkoKSB7XHJcbiAgICBpZiAoIXRoaXMuX2luaXQpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBuZXdZID0gdGhpcy5jdXJyZW50UG9zaXRpb25ZXHJcbiAgICBpZiAobmV3WSAhPT0gdGhpcy5sYXN0WSkge1xyXG4gICAgICB0aGlzLmxhc3RZID0gbmV3WTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19