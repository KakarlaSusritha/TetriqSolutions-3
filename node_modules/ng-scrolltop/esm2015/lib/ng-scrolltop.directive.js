/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, NgZone } from '@angular/core';
import { NgScrolltopService } from './ng-scrolltop.service';
/** @type {?} */
const DURATION = 1000;
export class NgScrolltopDirective {
    /**
     * @param {?} service
     * @param {?} ngZone
     */
    constructor(service, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        this.startTime = null;
        this.startTop = null;
        this.progress = 0;
        this.easing = (/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            'use strict';
            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        });
        this.scrollABit = this.scrollABit.bind(this);
    }
    /**
     * @return {?}
     */
    onclick() {
        this.startTop = this.service.currentPositionY;
        this.startTime = null;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => { window.requestAnimationFrame(this.scrollABit); }));
        this.service.log('NgScrolltopDirective click');
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    scrollABit(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        this.progress = timestamp - this.startTime;
        /** @type {?} */
        const percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
        /** @type {?} */
        const newY = this.startTop - Math.ceil(this.startTop * percent);
        this.service.scrollABit(newY);
        if (percent < 1) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => { window.requestAnimationFrame(this.scrollABit); }));
        }
    }
}
NgScrolltopDirective.decorators = [
    { type: Directive, args: [{
                selector: '[blScrolltop]'
            },] }
];
/** @nocollapse */
NgScrolltopDirective.ctorParameters = () => [
    { type: NgScrolltopService },
    { type: NgZone }
];
NgScrolltopDirective.propDecorators = {
    onclick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NgScrolltopDirective.prototype.startTime;
    /** @type {?} */
    NgScrolltopDirective.prototype.startTop;
    /** @type {?} */
    NgScrolltopDirective.prototype.progress;
    /** @type {?} */
    NgScrolltopDirective.prototype.easing;
    /** @type {?} */
    NgScrolltopDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    NgScrolltopDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsdG9wLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXNjcm9sbHRvcC8iLCJzb3VyY2VzIjpbImxpYi9uZy1zY3JvbGx0b3AuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O01BRXRELFFBQVEsR0FBRyxJQUFJO0FBS3JCLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBSy9CLFlBQW1CLE9BQTJCLEVBQ3BDLE1BQWM7UUFETCxZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTHhCLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFDekIsYUFBUSxHQUFXLElBQUksQ0FBQztRQUN4QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBZ0JyQixXQUFNOzs7O1FBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNiLFlBQVksQ0FBQztZQUViLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTtnQkFDWCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDL0I7WUFDRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFBO1FBbkJDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUdELE9BQU87UUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7O0lBV0QsVUFBVSxDQUFDLFNBQVM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDOztjQUNyQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7O2NBQ2pGLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFFL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztZQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztTQUN6RjtJQUNILENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7YUFDMUI7Ozs7WUFOUSxrQkFBa0I7WUFETyxNQUFNOzs7c0JBa0JyQyxZQUFZLFNBQUMsT0FBTzs7OztJQVRyQix5Q0FBeUI7O0lBQ3pCLHdDQUF3Qjs7SUFDeEIsd0NBQXFCOztJQWdCckIsc0NBT0M7O0lBckJXLHVDQUFrQzs7Ozs7SUFDNUMsc0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbHRvcFNlcnZpY2UgfSBmcm9tICcuL25nLXNjcm9sbHRvcC5zZXJ2aWNlJztcclxuXHJcbmNvbnN0IERVUkFUSU9OID0gMTAwMDtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2JsU2Nyb2xsdG9wXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2Nyb2xsdG9wRGlyZWN0aXZlIHtcclxuICBzdGFydFRpbWU6IG51bWJlciA9IG51bGw7XHJcbiAgc3RhcnRUb3A6IG51bWJlciA9IG51bGw7XHJcbiAgcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOiBOZ1Njcm9sbHRvcFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XHJcbiAgICB0aGlzLnNjcm9sbEFCaXQgPSB0aGlzLnNjcm9sbEFCaXQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBvbmNsaWNrKCkge1xyXG4gICAgdGhpcy5zdGFydFRvcCA9IHRoaXMuc2VydmljZS5jdXJyZW50UG9zaXRpb25ZO1xyXG4gICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4geyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsQUJpdCk7IH0pO1xyXG5cclxuICAgIHRoaXMuc2VydmljZS5sb2coJ05nU2Nyb2xsdG9wRGlyZWN0aXZlIGNsaWNrJyk7XHJcbiAgfVxyXG5cclxuICBlYXNpbmcgPSAoeCkgPT4ge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGlmICh4IDwgMC41KSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnBvdyh4ICogMiwgMikgLyAyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygoMSAtIHgpICogMiwgMikgLyAyO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsQUJpdCh0aW1lc3RhbXApIHtcclxuICAgIGlmICghdGhpcy5zdGFydFRpbWUpIHtcclxuICAgICAgdGhpcy5zdGFydFRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHRoaXMuc3RhcnRUaW1lO1xyXG4gICAgY29uc3QgcGVyY2VudCA9ICh0aGlzLnByb2dyZXNzID49IERVUkFUSU9OID8gMSA6IHRoaXMuZWFzaW5nKHRoaXMucHJvZ3Jlc3MgLyBEVVJBVElPTikpO1xyXG4gICAgY29uc3QgbmV3WSA9IHRoaXMuc3RhcnRUb3AgLSBNYXRoLmNlaWwodGhpcy5zdGFydFRvcCAqIHBlcmNlbnQpO1xyXG5cclxuICAgIHRoaXMuc2VydmljZS5zY3JvbGxBQml0KG5ld1kpO1xyXG5cclxuICAgIGlmIChwZXJjZW50IDwgMSkge1xyXG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5zY3JvbGxBQml0KTsgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==