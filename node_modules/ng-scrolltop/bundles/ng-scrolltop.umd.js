(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-scrolltop', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ng-scrolltop'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_SCROLLED_PX = 500;
    var NgScrolltopService = /** @class */ (function () {
        function NgScrolltopService() {
            var _this = this;
            this.isDevMode = core.isDevMode();
            this.isWindow = typeof window !== 'undefined';
            this._init = false;
            // scrolling window by default or element if [elementId] is given
            this.lastY = 0;
            this.ticking = false;
            this.log = (/**
             * @param {?=} s
             * @param {...?} optional
             * @return {?}
             */
            function (s) {
                var optional = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optional[_i - 1] = arguments[_i];
                }
                return s && _this.isDevMode && console.log(s, optional);
            });
            this.handleScroll = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!_this.ticking) {
                    window.requestAnimationFrame((/**
                     * @return {?}
                     */
                    function () {
                        _this.updateLastY();
                        _this.ticking = false;
                    }));
                    _this.ticking = true;
                }
            });
        }
        Object.defineProperty(NgScrolltopService.prototype, "currentPositionY", {
            get: /**
             * @return {?}
             */
            function () {
                return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopService.prototype, "info", {
            get: /**
             * @return {?}
             */
            function () { return Math.ceil(this.lastY); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopService.prototype, "showIcon", {
            get: /**
             * @return {?}
             */
            function () { return this.isWindow && this.lastY > DEFAULT_SCROLLED_PX; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgScrolltopService.prototype.setDevMode = /**
         * @return {?}
         */
        function () { this.isDevMode = true; };
        /**
         * @param {?} elementId
         * @return {?}
         */
        NgScrolltopService.prototype.init = /**
         * @param {?} elementId
         * @return {?}
         */
        function (elementId) {
            if (this.isWindow) {
                this.destroy();
                this._elementToScroll = null;
                if (elementId) {
                    this._elementToScroll = (/** @type {?} */ (document.querySelector("#" + elementId)));
                }
                this._host = this._elementToScroll || window;
                this._host.addEventListener('scroll', this.handleScroll);
                this.log("'NgScrolltopService' to use " + (this._elementToScroll ? 'element' : 'window'), elementId || '');
            }
            this._init = true;
        };
        /**
         * @return {?}
         */
        NgScrolltopService.prototype.destroy = /**
         * @return {?}
         */
        function () {
            this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
        };
        /**
         * @param {?} newY
         * @return {?}
         */
        NgScrolltopService.prototype.scrollABit = /**
         * @param {?} newY
         * @return {?}
         */
        function (newY) {
            if (this._elementToScroll) {
                this._elementToScroll.scrollTop = newY;
            }
            else {
                window.scroll(0, newY);
            }
        };
        /**
         * @private
         * @return {?}
         */
        NgScrolltopService.prototype.updateLastY = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this._init)
                return;
            /** @type {?} */
            var newY = this.currentPositionY;
            if (newY !== this.lastY) {
                this.lastY = newY;
            }
        };
        NgScrolltopService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgScrolltopService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgScrolltopService.ngInjectableDef = core.defineInjectable({ factory: function NgScrolltopService_Factory() { return new NgScrolltopService(); }, token: NgScrolltopService, providedIn: "root" });
        return NgScrolltopService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var setElementStyle = (/**
     * @param {?} elem
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (elem, name, value) {
        if (elem && name) {
            elem.style[name] = value || '';
        }
    });
    var NgScrolltopComponent = /** @class */ (function () {
        function NgScrolltopComponent(service) {
            this.service = service;
            this._size = '48px';
            this.sizeInner = '24';
        }
        Object.defineProperty(NgScrolltopComponent.prototype, "bottom", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._bottom = value;
                setElementStyle(this.icon, 'bottom', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopComponent.prototype, "background", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._background = value;
                setElementStyle(this.icon, 'background', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopComponent.prototype, "elementId", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._elementId = value;
                this.service.init(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopComponent.prototype, "size", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._size = value;
                setElementStyle(this.icon, 'width', value);
                setElementStyle(this.icon, 'height', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgScrolltopComponent.prototype, "fill", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fill = value;
                setElementStyle(this.svg, 'fill', value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgScrolltopComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.service.init(this._elementId);
            this.icon = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev)')));
            this.svg = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev) svg')));
            if (this.icon) {
                setElementStyle(this.icon, 'bottom', this._bottom);
                setElementStyle(this.icon, 'background', this._background);
                setElementStyle(this.icon, 'width', this._size);
                setElementStyle(this.icon, 'height', this._size);
                setElementStyle(this.svg, 'fill', this._fill);
            }
            else {
                this.service.log("NgScrolltopComponent failed to find icon element, so any inputs will be ignored");
            }
            this.service.log("NgScrolltopComponent(" + this.service.isWindow + ", " + this._bottom + ", " + this._background + ", " + this._elementId + ")", this.icon && this.icon.style);
        };
        /**
         * @return {?}
         */
        NgScrolltopComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.service.destroy();
        };
        NgScrolltopComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'scrolltop',
                        template: "\n<div class=\"scroll-top\" blScrolltop\n  [ngClass]=\"{'show-icon': service.showIcon}\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" [attr.width]=\"sizeInner\" [attr.height]=\"sizeInner\" viewBox=\"0 0 24 24\"><path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\n</div>\n\n<div class=\"scroll-top dev\" *ngIf=\"service.isDevMode\">\n  {{service.info}}\n</div>\n  ",
                        styles: ["\n  .scroll-top {\n    position: fixed;\n    bottom: 12px;\n    left: 12px;\n    height: 48px;\n    width: 48px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    background: #333;\n    transform: rotate(-90deg);\n    opacity: 0;\n    visibility: hidden;\n    transition: visibility 1.0s linear, opacity 1.0s linear;\n  }\n  .scroll-top:hover {\n    cursor: pointer;\n  }\n  .scroll-top.show-icon {\n    visibility: visible;\n    opacity: 0.3;\n  }\n  .scroll-top.dev {\n    bottom: 150px;\n    visibility: visible;\n    opacity: 0.5;\n    transform: none;\n    color: #fff;\n  }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NgScrolltopComponent.ctorParameters = function () { return [
            { type: NgScrolltopService }
        ]; };
        NgScrolltopComponent.propDecorators = {
            bottom: [{ type: core.Input }],
            background: [{ type: core.Input }],
            elementId: [{ type: core.Input }],
            size: [{ type: core.Input }],
            sizeInner: [{ type: core.Input }],
            fill: [{ type: core.Input }]
        };
        return NgScrolltopComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DURATION = 1000;
    var NgScrolltopDirective = /** @class */ (function () {
        function NgScrolltopDirective(service, ngZone) {
            this.service = service;
            this.ngZone = ngZone;
            this.startTime = null;
            this.startTop = null;
            this.progress = 0;
            this.easing = (/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                if (x < 0.5) {
                    return Math.pow(x * 2, 2) / 2;
                }
                return 1 - Math.pow((1 - x) * 2, 2) / 2;
            });
            this.scrollABit = this.scrollABit.bind(this);
        }
        /**
         * @return {?}
         */
        NgScrolltopDirective.prototype.onclick = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.startTop = this.service.currentPositionY;
            this.startTime = null;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { window.requestAnimationFrame(_this.scrollABit); }));
            this.service.log('NgScrolltopDirective click');
        };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        NgScrolltopDirective.prototype.scrollABit = /**
         * @param {?} timestamp
         * @return {?}
         */
        function (timestamp) {
            var _this = this;
            if (!this.startTime) {
                this.startTime = timestamp;
            }
            this.progress = timestamp - this.startTime;
            /** @type {?} */
            var percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
            /** @type {?} */
            var newY = this.startTop - Math.ceil(this.startTop * percent);
            this.service.scrollABit(newY);
            if (percent < 1) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { window.requestAnimationFrame(_this.scrollABit); }));
            }
        };
        NgScrolltopDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[blScrolltop]'
                    },] }
        ];
        /** @nocollapse */
        NgScrolltopDirective.ctorParameters = function () { return [
            { type: NgScrolltopService },
            { type: core.NgZone }
        ]; };
        NgScrolltopDirective.propDecorators = {
            onclick: [{ type: core.HostListener, args: ['click',] }]
        };
        return NgScrolltopDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgScrolltopModule = /** @class */ (function () {
        function NgScrolltopModule() {
        }
        NgScrolltopModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            NgScrolltopComponent,
                            NgScrolltopDirective,
                        ],
                        exports: [
                            NgScrolltopComponent,
                            NgScrolltopDirective,
                        ]
                    },] }
        ];
        return NgScrolltopModule;
    }());

    exports.NgScrolltopComponent = NgScrolltopComponent;
    exports.NgScrolltopModule = NgScrolltopModule;
    exports.NgScrolltopService = NgScrolltopService;
    exports.ɵa = NgScrolltopDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-scrolltop.umd.js.map
