import { isDevMode, Injectable, defineInjectable, Component, Input, Directive, NgZone, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_SCROLLED_PX = 500;
class NgScrolltopService {
    constructor() {
        this.isDevMode = isDevMode();
        this.isWindow = typeof window !== 'undefined';
        this._init = false;
        // scrolling window by default or element if [elementId] is given
        this.lastY = 0;
        this.ticking = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        (s, ...optional) => s && this.isDevMode && console.log(s, optional));
        this.handleScroll = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.ticking) {
                window.requestAnimationFrame((/**
                 * @return {?}
                 */
                () => {
                    this.updateLastY();
                    this.ticking = false;
                }));
                this.ticking = true;
            }
        });
    }
    /**
     * @return {?}
     */
    get currentPositionY() {
        return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
    }
    /**
     * @return {?}
     */
    get info() { return Math.ceil(this.lastY); }
    /**
     * @return {?}
     */
    get showIcon() { return this.isWindow && this.lastY > DEFAULT_SCROLLED_PX; }
    /**
     * @return {?}
     */
    setDevMode() { this.isDevMode = true; }
    /**
     * @param {?} elementId
     * @return {?}
     */
    init(elementId) {
        if (this.isWindow) {
            this.destroy();
            this._elementToScroll = null;
            if (elementId) {
                this._elementToScroll = (/** @type {?} */ (document.querySelector(`#${elementId}`)));
            }
            this._host = this._elementToScroll || window;
            this._host.addEventListener('scroll', this.handleScroll);
            this.log(`'NgScrolltopService' to use ${this._elementToScroll ? 'element' : 'window'}`, elementId || '');
        }
        this._init = true;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
    }
    /**
     * @param {?} newY
     * @return {?}
     */
    scrollABit(newY) {
        if (this._elementToScroll) {
            this._elementToScroll.scrollTop = newY;
        }
        else {
            window.scroll(0, newY);
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateLastY() {
        if (!this._init)
            return;
        /** @type {?} */
        const newY = this.currentPositionY;
        if (newY !== this.lastY) {
            this.lastY = newY;
        }
    }
}
NgScrolltopService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgScrolltopService.ctorParameters = () => [];
/** @nocollapse */ NgScrolltopService.ngInjectableDef = defineInjectable({ factory: function NgScrolltopService_Factory() { return new NgScrolltopService(); }, token: NgScrolltopService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const setElementStyle = (/**
 * @param {?} elem
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
(elem, name, value) => {
    if (elem && name) {
        elem.style[name] = value || '';
    }
});
class NgScrolltopComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this._size = '48px';
        this.sizeInner = '24';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set bottom(value) {
        this._bottom = value;
        setElementStyle(this.icon, 'bottom', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set background(value) {
        this._background = value;
        setElementStyle(this.icon, 'background', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementId(value) {
        this._elementId = value;
        this.service.init(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        setElementStyle(this.icon, 'width', value);
        setElementStyle(this.icon, 'height', value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fill(value) {
        this._fill = value;
        setElementStyle(this.svg, 'fill', value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.service.init(this._elementId);
        this.icon = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev)')));
        this.svg = (/** @type {?} */ (document.querySelector('div.scroll-top:not(.dev) svg')));
        if (this.icon) {
            setElementStyle(this.icon, 'bottom', this._bottom);
            setElementStyle(this.icon, 'background', this._background);
            setElementStyle(this.icon, 'width', this._size);
            setElementStyle(this.icon, 'height', this._size);
            setElementStyle(this.svg, 'fill', this._fill);
        }
        else {
            this.service.log(`NgScrolltopComponent failed to find icon element, so any inputs will be ignored`);
        }
        this.service.log(`NgScrolltopComponent(${this.service.isWindow}, ${this._bottom}, ${this._background}, ${this._elementId})`, this.icon && this.icon.style);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.service.destroy();
    }
}
NgScrolltopComponent.decorators = [
    { type: Component, args: [{
                selector: 'scrolltop',
                template: `
<div class="scroll-top" blScrolltop
  [ngClass]="{'show-icon': service.showIcon}">
  <svg xmlns="http://www.w3.org/2000/svg" [attr.width]="sizeInner" [attr.height]="sizeInner" viewBox="0 0 24 24"><path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
</div>

<div class="scroll-top dev" *ngIf="service.isDevMode">
  {{service.info}}
</div>
  `,
                styles: [`
  .scroll-top {
    position: fixed;
    bottom: 12px;
    left: 12px;
    height: 48px;
    width: 48px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background: #333;
    transform: rotate(-90deg);
    opacity: 0;
    visibility: hidden;
    transition: visibility 1.0s linear, opacity 1.0s linear;
  }
  .scroll-top:hover {
    cursor: pointer;
  }
  .scroll-top.show-icon {
    visibility: visible;
    opacity: 0.3;
  }
  .scroll-top.dev {
    bottom: 150px;
    visibility: visible;
    opacity: 0.5;
    transform: none;
    color: #fff;
  }
    `]
            }] }
];
/** @nocollapse */
NgScrolltopComponent.ctorParameters = () => [
    { type: NgScrolltopService }
];
NgScrolltopComponent.propDecorators = {
    bottom: [{ type: Input }],
    background: [{ type: Input }],
    elementId: [{ type: Input }],
    size: [{ type: Input }],
    sizeInner: [{ type: Input }],
    fill: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DURATION = 1000;
class NgScrolltopDirective {
    /**
     * @param {?} service
     * @param {?} ngZone
     */
    constructor(service, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        this.startTime = null;
        this.startTop = null;
        this.progress = 0;
        this.easing = (/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        });
        this.scrollABit = this.scrollABit.bind(this);
    }
    /**
     * @return {?}
     */
    onclick() {
        this.startTop = this.service.currentPositionY;
        this.startTime = null;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => { window.requestAnimationFrame(this.scrollABit); }));
        this.service.log('NgScrolltopDirective click');
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    scrollABit(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        this.progress = timestamp - this.startTime;
        /** @type {?} */
        const percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
        /** @type {?} */
        const newY = this.startTop - Math.ceil(this.startTop * percent);
        this.service.scrollABit(newY);
        if (percent < 1) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => { window.requestAnimationFrame(this.scrollABit); }));
        }
    }
}
NgScrolltopDirective.decorators = [
    { type: Directive, args: [{
                selector: '[blScrolltop]'
            },] }
];
/** @nocollapse */
NgScrolltopDirective.ctorParameters = () => [
    { type: NgScrolltopService },
    { type: NgZone }
];
NgScrolltopDirective.propDecorators = {
    onclick: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgScrolltopModule {
}
NgScrolltopModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    NgScrolltopComponent,
                    NgScrolltopDirective,
                ],
                exports: [
                    NgScrolltopComponent,
                    NgScrolltopDirective,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgScrolltopComponent, NgScrolltopModule, NgScrolltopService, NgScrolltopDirective as ɵa };
//# sourceMappingURL=ng-scrolltop.js.map
